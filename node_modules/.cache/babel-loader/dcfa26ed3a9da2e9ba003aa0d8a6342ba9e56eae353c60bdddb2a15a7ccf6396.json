{"ast":null,"code":"import * as React from \"rehackt\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nvar contextKey = canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nexport function getApolloContext() {\n  invariant(\"createContext\" in React, 54);\n  var context = React.createContext[contextKey];\n  if (!context) {\n    Object.defineProperty(React.createContext, contextKey, {\n      value: context = React.createContext({}),\n      enumerable: false,\n      writable: false,\n      configurable: true\n    });\n    context.displayName = \"ApolloContext\";\n  }\n  return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport var resetApolloContext = getApolloContext;","map":{"version":3,"names":["React","canUseSymbol","invariant","contextKey","Symbol","for","getApolloContext","context","createContext","Object","defineProperty","value","enumerable","writable","configurable","displayName","resetApolloContext"],"sources":["C:/Users/hp/Desktop/Projetyacine/agence-voyage/node_modules/@apollo/client/react/context/ApolloContext.js"],"sourcesContent":["import * as React from \"rehackt\";\nimport { canUseSymbol } from \"../../utilities/index.js\";\nimport { invariant } from \"../../utilities/globals/index.js\";\n// To make sure Apollo Client doesn't create more than one React context\n// (which can lead to problems like having an Apollo Client instance added\n// in one context, then attempting to retrieve it from another different\n// context), a single Apollo context is created and tracked in global state.\nvar contextKey = canUseSymbol ? Symbol.for(\"__APOLLO_CONTEXT__\") : \"__APOLLO_CONTEXT__\";\nexport function getApolloContext() {\n    invariant(\"createContext\" in React, 54);\n    var context = React.createContext[contextKey];\n    if (!context) {\n        Object.defineProperty(React.createContext, contextKey, {\n            value: (context = React.createContext({})),\n            enumerable: false,\n            writable: false,\n            configurable: true,\n        });\n        context.displayName = \"ApolloContext\";\n    }\n    return context;\n}\n/**\n * @deprecated This function has no \"resetting\" effect since Apollo Client 3.4.12,\n * and will be removed in the next major version of Apollo Client.\n * If you want to get the Apollo Context, use `getApolloContext` instead.\n */\nexport var resetApolloContext = getApolloContext;\n//# sourceMappingURL=ApolloContext.js.map"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,SAAS,QAAQ,kCAAkC;AAC5D;AACA;AACA;AACA;AACA,IAAIC,UAAU,GAAGF,YAAY,GAAGG,MAAM,CAACC,GAAG,CAAC,oBAAoB,CAAC,GAAG,oBAAoB;AACvF,OAAO,SAASC,gBAAgBA,CAAA,EAAG;EAC/BJ,SAAS,CAAC,eAAe,IAAIF,KAAK,EAAE,EAAE,CAAC;EACvC,IAAIO,OAAO,GAAGP,KAAK,CAACQ,aAAa,CAACL,UAAU,CAAC;EAC7C,IAAI,CAACI,OAAO,EAAE;IACVE,MAAM,CAACC,cAAc,CAACV,KAAK,CAACQ,aAAa,EAAEL,UAAU,EAAE;MACnDQ,KAAK,EAAGJ,OAAO,GAAGP,KAAK,CAACQ,aAAa,CAAC,CAAC,CAAC,CAAE;MAC1CI,UAAU,EAAE,KAAK;MACjBC,QAAQ,EAAE,KAAK;MACfC,YAAY,EAAE;IAClB,CAAC,CAAC;IACFP,OAAO,CAACQ,WAAW,GAAG,eAAe;EACzC;EACA,OAAOR,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIS,kBAAkB,GAAGV,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}